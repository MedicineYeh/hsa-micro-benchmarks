module &_tmp_cloc10456_vector_copy_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_vector_copy_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %in,
	kernarg_u64 %out)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_vector_copy_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:in:u32:1:1:96:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "pointer:out:u32:1:1:112:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:int*";
	pragma "AMD RTI", "reflection:7:int*";
	pragma "AMD RTI", "ARGEND:__OpenCL_vector_copy_kernel";

@__OpenCL_vector_copy_kernel_entry:
	// BB#0:
	ld_kernarg_align(8)_width(all)_u64	$d0, [%in];
	ld_global_align(4)_const_width(all)_u32	$s0, [$d0];
	mul_u32	$s0, $s0, 1000;
	cmp_lt_b1_s32	$c0, $s0, 1;
	cbr_b1	$c0, @BB0_3;
	// BB#1:                                // %.lr.ph
	ld_kernarg_align(8)_width(all)_u64	$d1, [%out];
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d2, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d3, [%__global_offset_0];
	add_u64	$d2, $d2, $d3;
	shl_u64	$d2, $d2, 32;
	shr_s64	$d2, $d2, 32;
	mov_b32	$s0, 0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	add_u64	$d2, $d0, $d2;

    // d0: in[0]
	ld_global_align(4)_width(all)_u32	$s1, [$d0];
	mul_u32	$s1, $s1, 1000;
    //Start for loop in[0] * 10000 times
@BB0_2:
	// %for.body don't touch register s0, s1
    // s0: loop iterator
    // s1: loop times
    //TAG_REPLACEMENT

	// %for
	add_u32	$s0, $s0, 1;
	cmp_lt_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_2;

    // Store the result back to out[id]
    // d2: in[id]
    // d1: out[id]
	ld_global_align(4)_u32	$s1, [$d2];
	st_global_align(4)_u32	$s1, [$d1];

@BB0_3:
	// %._crit_edge
	ret;
};
